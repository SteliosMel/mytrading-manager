<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Risk Manager v3 (2-column)</title>
  <!-- Tailwind (CDN) -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- React + ReactDOM + Babel (for JSX in the browser) -->
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
</head>
<body class="bg-gray-50 text-gray-900">
  <div id="root"></div>

  <script type="text/babel">
    const { useState, useMemo, useEffect } = React;

    // small helper
    const cls = (...s) => s.filter(Boolean).join(" ");
    const num = (v,d=2) => isFinite(v) ? v.toLocaleString(undefined,{maximumFractionDigits:d}) : "–";
    const money = v => isFinite(v) ? v.toLocaleString(undefined,{style:"currency",currency:"USD",maximumFractionDigits:2}) : "–";

    // Broker presets (VPU, spreads, commissions) – simplified
    const VPUS = {
      "PU Prime": { XAUUSD:{vpu:100,dec:2}, US30:{vpu:1,dec:1}, NAS100:{vpu:1,dec:1}, BTCUSD:{vpu:1,dec:1} },
      "IC Trading":{ XAUUSD:{vpu:100,dec:2}, US30:{vpu:1,dec:1}, NAS100:{vpu:1,dec:1}, BTCUSD:{vpu:1,dec:1} },
      "Vantage":   { XAUUSD:{vpu:100,dec:2}, US30:{vpu:1,dec:1}, NAS100:{vpu:1,dec:1}, BTCUSD:{vpu:1,dec:1} },
    };
    const SPREADS = {
      "PU Prime": { XAUUSD:0.08, US30:3.6, NAS100:0.7, BTCUSD:0.07 },
      "IC Trading":{ XAUUSD:0.40, US30:0.7, NAS100:1.0, BTCUSD:1.0 },
      "Vantage":   { XAUUSD:0.17, US30:2.0, NAS100:0.5, BTCUSD:0.01 },
    };
    const COMM = {
      "PU Prime": { XAUUSD:7, US30:0, NAS100:0, BTCUSD:0 },
      "IC Trading":{ XAUUSD:7, US30:0, NAS100:0, BTCUSD:0 },
      "Vantage":   { XAUUSD:6, US30:0, NAS100:0, BTCUSD:0 },
    };

    function App(){
      // theme
      const [dark,setDark] = useState(false);

      // account
      const [balance,setBalance] = useState(10000);
      const [equity,setEquity] = useState(10000);
      const [riskPct,setRiskPct] = useState(1);
      const riskAmt = (equity * (riskPct/100)) || 0;

      // broker / symbol
      const [broker,setBroker] = useState("PU Prime");
      const [symbol,setSymbol] = useState("XAUUSD");

      // VPU active
      const vpuInfo = VPUS[broker]?.[symbol] ?? {vpu:100000,dec:2};
      const [useCustomVPU,setUseCustomVPU] = useState(false);
      const [customVPU,setCustomVPU] = useState(vpuInfo.vpu);
      const VPU = useMemo(()=> useCustomVPU ? customVPU : vpuInfo.vpu, [useCustomVPU,customVPU,vpuInfo.vpu]);

      // Entry/SL/TPs
      const [side,setSide] = useState("BUY");
      const [entry,setEntry] = useState(2400);
      const [sl,setSL] = useState(2365);
      const [tp1,setTP1] = useState(2440);
      const [tp2,setTP2] = useState(2520);
      const [pct1,setPct1] = useState(50);
      const [pct2,setPct2] = useState(30);
      const runnerPct = Math.max(0,100-pct1-pct2);
      const [runnerTP,setRunnerTP] = useState("");

      // Costs
      const [usePresets,setUsePresets] = useState(true);
      const [spread,setSpread] = useState(0.08);
      const [commRT,setCommRT] = useState(7);
      useEffect(()=>{
        if(!usePresets) return;
        const s = SPREADS[broker]?.[symbol];
        const c = COMM[broker]?.[symbol];
        if(typeof s==="number") setSpread(s);
        if(typeof c==="number") setCommRT(c);
      },[broker,symbol,usePresets]);

      // ATR (manual)
      const [useATR,setUseATR] = useState(false);
      const [atrVal,setAtrVal] = useState(10);
      const [atrSLm,setAtrSLm] = useState(1.5);
      const [atrTP1m,setAtrTP1m] = useState(2);
      const [atrTP2m,setAtrTP2m] = useState(3);
      const [atrTrailm,setAtrTrailm] = useState(1);

      const dec = vpuInfo.dec ?? 2;

      const baseSL = Math.abs(entry - sl);
      const baseTP1 = Math.abs(tp1 - entry);
      const baseTP2 = Math.abs(tp2 - entry);
      const baseRunner = runnerTP==="" ? 0 : Math.abs(Number(runnerTP) - entry);

      // spread-adjusted (conservative)
      const slDist = baseSL + spread;
      const tp1Dist = Math.max(0, baseTP1 - spread);
      const tp2Dist = Math.max(0, baseTP2 - spread);
      const runnerDist = Math.max(0, baseRunner - spread);

      // per-lot
      const lossPerLot = slDist * VPU + commRT;
      const p1PerLot = tp1Dist * VPU - commRT*(pct1/100);
      const p2PerLot = tp2Dist * VPU - commRT*(pct2/100);
      const prPerLot = runnerPct>0 ? (runnerDist * VPU - commRT*(runnerPct/100)) : 0;

      const lotSize = lossPerLot>0 ? (riskAmt / lossPerLot) : 0;
      const estProfit = lotSize * (p1PerLot*(pct1/100) + p2PerLot*(pct2/100) + prPerLot*(runnerPct/100));

      // risk caps & manual P/L
      const [dayCap,setDayCap] = useState(5);
      const [totCap,setTotCap] = useState(10);
      const [cumDay,setCumDay] = useState(0);
      const [cumTot,setCumTot] = useState(0);
      const dayDD = balance>0 ? Math.max(0, (-cumDay / balance)*100) : 0;
      const totDD = balance>0 ? Math.max(0, (-cumTot / balance)*100) : 0;
      const canTrade = !(dayDD>=dayCap || totDD>=totCap);

      const [manualPL,setManualPL] = useState("");
      const addPL = where => {
        const v = parseFloat((manualPL||"").replace(',','.'));
        if(!isFinite(v) || v===0) return;
        if(where==="day"||where==="both") setCumDay(prev=>prev+v);
        if(where==="tot"||where==="both") setCumTot(prev=>prev+v);
        setManualPL("");
      };

      const applyATR = () => {
        if(!useATR) return;
        const sld = atrVal*atrSLm, t1d = atrVal*atrTP1m, t2d = atrVal*atrTP2m;
        const ns = side==="BUY" ? entry - sld : entry + sld;
        const nt1 = side==="BUY" ? entry + t1d : entry - t1d;
        const nt2 = side==="BUY" ? entry + t2d : entry - t2d;
        setSL(Number(ns.toFixed(dec)));
        setTP1(Number(nt1.toFixed(dec)));
        setTP2(Number(nt2.toFixed(dec)));
      };

      return (
        <div className={cls(dark?"bg-neutral-900 text-neutral-100":"bg-gray-50 text-gray-900","min-h-screen")}>
          <div className="max-w-6xl mx-auto p-4 sm:p-6">
            <header className="flex items-center justify-between mb-4">
              <h1 className="text-2xl font-semibold">Risk Manager v3</h1>
              <button onClick={()=>setDark(d=>!d)} className="px-3 py-1.5 rounded-xl border border-gray-300 bg-white text-gray-700 hover:bg-gray-100">
                {dark?"Light mode":"Dark mode"}
              </button>
            </header>

            {/* TWO COLUMNS on desktop, ONE on mobile */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              {/* Left column */}
              <div className="space-y-6">
                {/* Account */}
                <section className={cls(dark?"bg-neutral-800 border-neutral-700":"bg-white border-gray-200","rounded-2xl border p-4")}>
                  <h2 className="font-medium mb-3">Account</h2>
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <label>Balance
                      <input type="number" value={balance} onChange={e=>setBalance(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Equity
                      <input type="number" value={equity} onChange={e=>setEquity(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Risk %
                      <input type="number" step="0.1" value={riskPct} onChange={e=>setRiskPct(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <div className="flex items-end">
                      <span className="px-2 py-1 rounded-full text-xs bg-gray-100 border border-gray-200">
                        Risk ${num(riskAmt,2)}
                      </span>
                    </div>
                  </div>

                  <div className="mt-3 grid grid-cols-2 gap-3 text-sm">
                    <label>Day Cap %
                      <input type="number" step="0.1" value={dayCap} onChange={e=>setDayCap(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Total Cap %
                      <input type="number" step="0.1" value={totCap} onChange={e=>setTotCap(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>

                    <div className="col-span-2 flex items-center gap-2 flex-wrap">
                      <span className="px-2 py-1 rounded-full text-xs bg-gray-100 border border-gray-200">
                        Day DD {num(dayDD,1)}% / Cap {num(dayCap,1)}%
                      </span>
                      <span className="px-2 py-1 rounded-full text-xs bg-gray-100 border border-gray-200">
                        Total DD {num(totDD,1)}% / Cap {num(totCap,1)}%
                      </span>
                      <span className={cls("px-2 py-1 rounded-full text-xs border",
                        canTrade?"bg-green-100 border-green-200":"bg-red-100 border-red-200")}>
                        {canTrade?"Can trade":"BLOCKED"}
                      </span>
                    </div>

                    <label className="col-span-2">Manual P/L ($) — positive profit, negative loss
                      <input type="text" value={manualPL} onChange={e=>setManualPL(e.target.value)}
                             placeholder="e.g. -100 or 120.5"
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <div className="flex items-center gap-2">
                      <button onClick={()=>addPL("day")} className="px-2 py-1 rounded-xl border border-gray-300 bg-white hover:bg-gray-100">Add to Day</button>
                      <button onClick={()=>addPL("tot")} className="px-2 py-1 rounded-xl border border-gray-300 bg-white hover:bg-gray-100">Add to Total</button>
                      <button onClick={()=>addPL("both")} className="px-2 py-1 rounded-xl border border-gray-300 bg-white hover:bg-gray-100">Add to Both</button>
                    </div>
                    <div className="text-xs text-gray-500 col-span-2">
                      Cum — Day: {money(cumDay)} | Total: {money(cumTot)}
                    </div>
                  </div>
                </section>

                {/* Targets / partials */}
                <section className={cls(dark?"bg-neutral-800 border-neutral-700":"bg-white border-gray-200","rounded-2xl border p-4")}>
                  <h2 className="font-medium mb-3">Targets & Partials</h2>
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <label>TP1 price
                      <input type="number" value={tp1} onChange={e=>setTP1(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Close % @ TP1
                      <input type="number" value={pct1} onChange={e=>setPct1(Math.min(100,Math.max(0,parseFloat(e.target.value)||0)))}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>TP2 price
                      <input type="number" value={tp2} onChange={e=>setTP2(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Close % @ TP2
                      <input type="number" value={pct2} onChange={e=>setPct2(Math.min(100,Math.max(0,parseFloat(e.target.value)||0)))}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label className="col-span-2">Runner TP (optional)
                      <input type="number" value={runnerTP} onChange={e=>setRunnerTP(e.target.value)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <div className="text-sm">Runner %: <b>{runnerPct}%</b></div>
                  </div>
                </section>
              </div>

              {/* Right column */}
              <div className="space-y-6">
                {/* Broker & Trade */}
                <section className={cls(dark?"bg-neutral-800 border-neutral-700":"bg-white border-gray-200","rounded-2xl border p-4")}>
                  <h2 className="font-medium mb-3">Broker & Trade</h2>
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <label>Broker
                      <select value={broker} onChange={e=>setBroker(e.target.value)}
                              className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2 bg-white">
                        <option>PU Prime</option>
                        <option>IC Trading</option>
                        <option>Vantage</option>
                      </select>
                    </label>
                    <label>Symbol
                      <select value={symbol} onChange={e=>setSymbol(e.target.value)}
                              className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2 bg-white">
                        <option>XAUUSD</option>
                        <option>US30</option>
                        <option>NAS100</option>
                        <option>BTCUSD</option>
                      </select>
                    </label>

                    <div className="col-span-2 flex items-center gap-2">
                      <input id="cv" type="checkbox" checked={useCustomVPU} onChange={e=>setUseCustomVPU(e.target.checked)}/>
                      <label htmlFor="cv">Custom VPU (USD per 1.0 price move @ 1.0 lot)</label>
                    </div>
                    <label className="col-span-2">VPU
                      <input type="number" value={useCustomVPU?customVPU:VPU}
                             onChange={e=>setCustomVPU(parseFloat(e.target.value)||0)}
                             disabled={!useCustomVPU}
                             className={cls("mt-1 w-full rounded-xl border px-3 py-2",
                                useCustomVPU?"border-gray-300":"border-dashed border-gray-300 bg-gray-50 text-gray-400")}/>
                    </label>

                    <label>Side
                      <select value={side} onChange={e=>setSide(e.target.value)}
                              className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2 bg-white">
                        <option>BUY</option><option>SELL</option>
                      </select>
                    </label>
                    <label>Entry
                      <input type="number" value={entry} onChange={e=>setEntry(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Stop Loss
                      <input type="number" value={sl} onChange={e=>setSL(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>

                    <div className="col-span-2 flex items-center gap-2">
                      <input id="up" type="checkbox" checked={usePresets} onChange={e=>setUsePresets(e.target.checked)}/>
                      <label htmlFor="up">Use preset Spread & Commission for this Broker/Symbol</label>
                    </div>
                    <label>Spread (price units)
                      <input type="number" step="0.01" value={spread} onChange={e=>setSpread(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Commission (round-trip, $ / lot)
                      <input type="number" step="0.01" value={commRT} onChange={e=>setCommRT(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <div className="col-span-2 text-xs text-gray-500">
                      SL base: {num(baseSL,dec)} | SL adj: {num(slDist,dec)} | Spread: {num(spread,dec)} | Commission RT: {money(commRT)}
                    </div>
                  </div>
                </section>

                {/* ATR */}
                <section className={cls(dark?"bg-neutral-800 border-neutral-700":"bg-white border-gray-200","rounded-2xl border p-4")}>
                  <h2 className="font-medium mb-3">ATR Engine (manual)</h2>
                  <div className="grid grid-cols-2 gap-3 text-sm">
                    <div className="col-span-2 flex items-center gap-2">
                      <input id="atr" type="checkbox" checked={useATR} onChange={e=>setUseATR(e.target.checked)}/>
                      <label htmlFor="atr">Enable ATR-based TP/SL & TSL</label>
                    </div>
                    <label>ATR value (units)
                      <input type="number" step="0.01" value={atrVal} onChange={e=>setAtrVal(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>SL × ATR
                      <input type="number" step="0.1" value={atrSLm} onChange={e=>setAtrSLm(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>TP1 × ATR
                      <input type="number" step="0.1" value={atrTP1m} onChange={e=>setAtrTP1m(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>TP2 × ATR
                      <input type="number" step="0.1" value={atrTP2m} onChange={e=>setAtrTP2m(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <label>Trail × ATR
                      <input type="number" step="0.1" value={atrTrailm} onChange={e=>setAtrTrailm(parseFloat(e.target.value)||0)}
                             className="mt-1 w-full rounded-xl border border-gray-300 px-3 py-2"/>
                    </label>
                    <div className="col-span-2">
                      <button onClick={applyATR} className="px-3 py-2 rounded-xl border border-gray-300 bg-white hover:bg-gray-100">
                        Apply ATR to SL/TP
                      </button>
                    </div>
                  </div>
                </section>

                {/* Results */}
                <section className={cls(dark?"bg-neutral-800 border-neutral-700":"bg-white border-gray-200","rounded-2xl border p-4")}>
                  <h2 className="font-medium mb-3">Results</h2>
                  <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                    <div className="rounded-xl border border-gray-200 p-4 bg-white">
                      <div className="text-sm text-gray-500">Suggested Lot Size</div>
                      <div className="text-2xl font-semibold mt-1">{num(lotSize,3)}</div>
                      <div className="text-xs text-gray-500 mt-1">lots</div>
                    </div>
                    <div className="rounded-xl border border-gray-200 p-4 bg-white">
                      <div className="text-sm text-gray-500">Loss at SL</div>
                      <div className="text-2xl font-semibold mt-1">{money(lossPerLot*lotSize)}</div>
                      <div className="text-xs text-gray-500 mt-1">SL adj {num(slDist,dec)} units</div>
                    </div>
                    <div className="rounded-xl border border-gray-200 p-4 bg-white">
                      <div className="text-sm text-gray-500">Profit if TP1+TP2(+Runner)</div>
                      <div className="text-2xl font-semibold mt-1">{money(estProfit)}</div>
                      <div className="text-xs text-gray-500 mt-1">Sequential targets</div>
                    </div>
                  </div>
                </section>
              </div>
            </div>

            <footer className="text-xs text-gray-500 mt-6">
              Built for quick pre-trade sizing. Confirm exact contract/VPU, spreads & commissions with your broker.
            </footer>
          </div>
        </div>
      );
    }

    ReactDOM.createRoot(document.getElementById("root")).render(<App/>);
  </script>
</body>
</html>
